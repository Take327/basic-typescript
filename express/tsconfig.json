{
  "compilerOptions": {
    /* このファイルの詳細については https://aka.ms/tsconfig を参照してください */

    /* プロジェクト */
    // "incremental": true,                              /* .tsbuildinfo ファイルを保存して、プロジェクトのインクリメンタルコンパイルを可能にします。 */
    // "composite": true,                                /* プロジェクト参照で使用できるように、TypeScript プロジェクトに制約を有効にします。 */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* インクリメンタルコンパイル用の .tsbuildinfo ファイルのパスを指定します。 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* コンポジットプロジェクトを参照するときに、宣言ファイルよりもソースファイルを優先しないようにします。 */
    // "disableSolutionSearching": true,                 /* 編集時に、複数プロジェクトの参照チェックをオプトアウトします。 */
    // "disableReferencedProjectLoad": true,             /* TypeScript による自動ロードされるプロジェクトの数を減らします。 */

    /* 言語と環境 */
    "target": "es2016" /* 出力される JavaScript の言語バージョンを指定し、互換ライブラリ宣言を含めます。 */,
    // "lib": [],                                        /* 対象の実行環境を記述するライブラリ宣言ファイルのセットを指定します。 */
    // "jsx": "preserve",                                /* 生成される JSX コードの形式を指定します。 */
    // "experimentalDecorators": true,                   /* 旧式の実験的なデコレーターのサポートを有効にします。 */
    // "emitDecoratorMetadata": true,                    /* ソースファイル内のデコレートされた宣言について、設計時の型メタデータを出力します。 */
    // "jsxFactory": "",                                 /* React JSX 出力時に使用する JSX ファクトリー関数 (例: 'React.createElement'、'h') を指定します。 */
    // "jsxFragmentFactory": "",                         /* React JSX 出力時にフラグメントに使用する JSX フラグメント参照 (例: 'React.Fragment'、'Fragment') を指定します。 */
    // "jsxImportSource": "",                            /* 'jsx: react-jsx*' を使用する場合、JSX ファクトリー関数をインポートするためのモジュール指定を行います。 */
    // "reactNamespace": "",                             /* 'createElement' の呼び出しに使用されるオブジェクトを指定します (React JSX をターゲットにする場合のみ有効)。 */
    // "noLib": true,                                    /* デフォルトの lib.d.ts を含む、あらゆるライブラリファイルのインクルードを無効にします。 */
    // "useDefineForClassFields": true,                  /* ECMAScript 標準準拠のクラスフィールドを出力します。 */
    // "moduleDetection": "auto",                        /* モジュール形式の JS ファイルを検出する方法を制御します。 */

    /* モジュール */
    "module": "commonjs" /* 生成されるモジュールコードの形式を指定します。 */,
    // "rootDir": "./",                                  /* ソースファイルのルートフォルダを指定します。 */
    "moduleResolution": "node" /* 指定されたモジュールの場所を、TypeScript がどのように検索するかを指定します。 */,
    // "baseUrl": "./",                                  /* 相対パスでないモジュール名を解決するための基準ディレクトリを指定します。 */
    // "paths": {},                                      /* インポートを他の検索場所にリマップするエントリを指定します。 */
    // "rootDirs": [],                                   /* モジュール解決時に複数フォルダを一つのフォルダとして扱うことを許可します。 */
    // "typeRoots": [],                                  /* './node_modules/@types' のように振る舞う複数フォルダを指定します。 */
    // "types": [],                                      /* ソースファイルで参照されていなくても含める型パッケージ名を指定します。 */
    // "allowUmdGlobalAccess": true,                     /* モジュールから UMD グローバルにアクセスすることを許可します。 */
    // "moduleSuffixes": [],                             /* モジュール解決時に検索するファイル名サフィックスを指定します。 */
    // "allowImportingTsExtensions": true,               /* TypeScript ファイル拡張子付きのインポートを許可します。'--moduleResolution bundler' と '--noEmit' または '--emitDeclarationOnly' が必要です。 */
    // "rewriteRelativeImportExtensions": true,          /* 相対インポートパスでの '.ts', '.tsx', '.mts', '.cts' を出力ファイルでの JavaScript 拡張子に書き換えます。 */
    // "resolvePackageJsonExports": true,                /* パッケージインポートの解決時に package.json の 'exports' フィールドを使用します。 */
    // "resolvePackageJsonImports": true,                /* インポートの解決時に package.json の 'imports' フィールドを使用します。 */
    // "customConditions": [],                           /* インポートを解決する際に、リゾルバ固有のデフォルトに加えて設定する条件を指定します。 */
    // "noUncheckedSideEffectImports": true,             /* 副作用のあるインポートをチェックします。 */
    // "resolveJsonModule": true,                        /* .json ファイルのインポートを有効にします。 */
    // "allowArbitraryExtensions": true,                 /* 宣言ファイルが存在する限り、任意の拡張子のファイルをインポートできるようにします。 */
    // "noResolve": true,                                /* 'import', 'require', '<reference>' によって追加されるファイルの数を増やさないようにします。 */

    /* JavaScript サポート */
    // "allowJs": true,                                  /* JavaScript ファイルをプログラムの一部として許可します。'checkJS' オプションを使用するとこれらのファイルからエラーを取得できます。 */
    // "checkJs": true,                                  /* 型チェックされた JavaScript ファイルでエラー報告を有効にします。 */
    // "maxNodeModuleJsDepth": 1,                        /* 'node_modules' の JavaScript ファイルをチェックするときの最大フォルダ深さを指定します。'allowJs' 時のみ適用されます。 */

    /* 出力 */
    // "declaration": true,                              /* プロジェクト内の TypeScript および JavaScript ファイルから .d.ts ファイルを生成します。 */
    // "declarationMap": true,                           /* d.ts ファイル用のソースマップを作成します。 */
    // "emitDeclarationOnly": true,                      /* .d.ts ファイルのみ出力し、JavaScript ファイルは出力しません。 */
    // "sourceMap": true,                                /* 出力された JavaScript ファイル用のソースマップファイルを作成します。 */
    // "inlineSourceMap": true,                          /* ソースマップファイルを、出力された JavaScript 内に含めます。 */
    // "noEmit": true,                                   /* コンパイルからファイルを出力しないようにします。 */
    // "outFile": "./",                                  /* すべての出力をひとつの JavaScript ファイルにまとめるファイルを指定します。'declaration' が true の場合は、すべての .d.ts 出力もまとめます。 */
    // "outDir": "./",                                   /* すべての出力ファイルを配置するフォルダを指定します。 */
    // "removeComments": true,                           /* コメントを出力しないようにします。 */
    // "importHelpers": true,                            /* ファイルごとに含めるのではなく、tslib からプロジェクトごとに一度だけヘルパー関数をインポートします。 */
    // "downlevelIteration": true,                       /* イテレーション処理において、より多くのコードを生成しつつ標準準拠する JavaScript を出力します。 */
    // "sourceRoot": "",                                 /* デバッガーが参照元のソースコードを見つけるためのルートパスを指定します。 */
    // "mapRoot": "",                                    /* 生成された場所ではなく、デバッガーがマップファイルを配置する場所を指定します。 */
    // "inlineSources": true,                            /* 出力された JavaScript のソースマップ内にソースコードを含めます。 */
    // "emitBOM": true,                                  /* 出力ファイルの先頭に UTF-8 のバイトオーダーマーク (BOM) を出力します。 */
    // "newLine": "crlf",                                /* ファイル出力時に使用する改行コードを設定します。 */
    // "stripInternal": true,                            /* JSDoc コメントに '@internal' とある宣言の出力を無効にします。 */
    // "noEmitHelpers": true,                            /* コンパイル後の出力で '__extends' などのカスタムヘルパー関数を生成しません。 */
    // "noEmitOnError": true,                            /* 型チェックエラーが報告された場合、ファイルを出力しません。 */
    // "preserveConstEnums": true,                       /* 生成されたコードから 'const enum' の宣言を削除しないようにします。 */
    // "declarationDir": "./",                           /* 生成される宣言ファイルの出力先ディレクトリを指定します。 */

    /* 相互運用性の制約 */
    // "isolatedModules": true,                          /* 他のインポートに依存せず、それぞれのファイルが安全にトランスパイルできるようにします。 */
    // "verbatimModuleSyntax": true,                     /* type-only としてマークされていないインポートやエクスポートを変換または省略せず、'module' 設定に基づいて出力ファイル形式で書き込まれるようにします。 */
    // "isolatedDeclarations": true,                     /* エクスポートに十分なアノテーションを要求し、他のツールが簡単に宣言ファイルを生成できるようにします。 */
    // "allowSyntheticDefaultImports": true,             /* モジュールにデフォルトエクスポートがない場合でも 'import x from y' を許可します。 */
    "esModuleInterop": true /* CommonJS モジュールのインポートを容易にする追加の JavaScript を出力します。これにより、型の互換性のため 'allowSyntheticDefaultImports' が有効になります。 */,
    // "preserveSymlinks": true,                         /* シンボリックリンクを実際のパスに解決しないようにします。これは Node.js の同名フラグに対応します。 */
    "forceConsistentCasingInFileNames": true /* インポート時の大文字・小文字が正しいことを保証します。 */,

    /* 型チェック */
    "strict": true /* すべての厳密な型チェックオプションを有効にします。 */,
    // "noImplicitAny": true,                            /* 暗黙の 'any' 型を持つ式や宣言に対してエラーを報告します。 */
    // "strictNullChecks": true,                         /* 型チェック時に 'null' や 'undefined' を考慮します。 */
    // "strictFunctionTypes": true,                      /* 関数を代入する際、パラメータや戻り値がサブタイプ互換であることをチェックします。 */
    // "strictBindCallApply": true,                      /* 'bind'、'call'、'apply' メソッドの引数が元の関数に適合していることをチェックします。 */
    // "strictPropertyInitialization": true,             /* 宣言されているがコンストラクタで設定されていないクラスプロパティをチェックします。 */
    // "strictBuiltinIteratorReturn": true,              /* ビルトインイテレーターは 'any' ではなく 'undefined' の 'TReturn' 型でインスタンス化されます。 */
    // "noImplicitThis": true,                           /* 'this' が 'any' 型になっている場合にエラーを報告します。 */
    // "useUnknownInCatchVariables": true,               /* catch 節の変数をデフォルトで 'any' ではなく 'unknown' として扱います。 */
    // "alwaysStrict": true,                             /* 常に 'use strict' を出力します。 */
    // "noUnusedLocals": true,                           /* 読み取られていないローカル変数がある場合にエラーを報告します。 */
    // "noUnusedParameters": true,                       /* 関数パラメータが読み取られていない場合にエラーを報告します。 */
    // "exactOptionalPropertyTypes": true,               /* オプショナルプロパティを 'undefined' が追加されない厳密な型として解釈します。 */
    // "noImplicitReturns": true,                        /* 関数で明示的に return されないコードパスについてエラーを報告します。 */
    // "noFallthroughCasesInSwitch": true,               /* switch 文でフォールスルーが発生するケースについてエラーを報告します。 */
    // "noUncheckedIndexedAccess": true,                 /* インデックスによるアクセス時に、型に 'undefined' を追加します。 */
    // "noImplicitOverride": true,                       /* 派生クラスでメンバーをオーバーライドする際、override 修飾子を必須とします。 */
    // "noPropertyAccessFromIndexSignature": true,       /* インデックス型で宣言されたキーに対するアクセスを、インデックスアクセサの使用に限定します。 */
    // "allowUnusedLabels": true,                        /* 使用されていないラベルがあってもエラーを報告しません。 */
    // "allowUnreachableCode": true,                     /* 到達不能コードに関するエラーを報告しません。 */

    /* 完全性 */
    // "skipDefaultLibCheck": true,                      /* TypeScript に含まれている .d.ts ファイルの型チェックをスキップします。 */
    "skipLibCheck": true /* すべての .d.ts ファイルの型チェックをスキップします。 */
  }
}
